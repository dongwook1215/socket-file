#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('socket-file:server');
var http = require('http');
var fs = require('fs');
var path = require('path');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io')(server);
const AWS = require('aws-sdk');
const s3 = new AWS.S3({
  'accessKeyId': '',
  'secretAccessKey': ''
});

io.on('connection', function (socket) {
  var Files = {};
  socket.on('Start', function (data) {
    var Name = data.Name;
    Files[Name] = {
      FileSize: data.Size,
      Data: '',
      Downloaded: 0,
      ChunkBucket: 0
    };
    var Place = 0;
    console.log(`${Name} 파일 업로드 시작!!`);
    socket.emit('MoreData', {'Place': Place, Percent: 0});
  });

  socket.on('Upload', function (data) {
    const Name = data.Name;
    Files[Name].Downloaded += data.Data.length;
    Files[Name].Data += data.Data;
    const params = {
      'Bucket': `big-data-upload/${Name}`,
      'Key': `${Files[Name].ChunkBucket}`,
      'Body': Files[Name].Data
    };
    if (Files[Name].Downloaded === Files[Name].FileSize) {
      s3.upload(params).on('httpUploadProgress', function (progress) {
        console.log('Uploaded :: ' + String(parseInt((progress.loaded * 100) / progress.total)) + '%');
      }).send(function (s3Err, data) {
        if (s3Err) throw s3Err;
        var Place = Files[Name].Downloaded / 524288;
        var Percent = (Files[Name].Downloaded / Files[Name].FileSize) * 100;
        delete Files[Name];
        socket.emit('MoreData', {'Place': Place, 'Percent': Percent});
      });
    } else if (Files[Name].Data.length > 10485760) {
      s3.upload(params).on('httpUploadProgress', function (progress) {
        console.log('Uploaded :: ' + String(parseInt((progress.loaded * 100) / progress.total)) + '%');
      }).send(function (s3Err, data) {
        if (s3Err) throw s3Err;
        Files[Name].Data = ''; //Reset The Buffer
        Files[Name].ChunkBucket += 1;
        var Place = Files[Name].Downloaded / 524288;
        var Percent = (Files[Name].Downloaded / Files[Name].FileSize) * 100;
        socket.emit('MoreData', {'Place': Place, 'Percent': Percent});
      });
    } else {
      console.log('access');
      var Place = Files[Name].Downloaded / 524288;
      var Percent = (Files[Name].Downloaded / Files[Name].FileSize) * 100;
      socket.emit('MoreData', {'Place': Place, 'Percent': Percent});
    }
  });

  socket.on('Download', async function (data) {
    let params = {
      Bucket: "big-data-upload",
      Key: `${data.Name}/${data.Place}`
    }
    console.log(params);
    // const readStream = await s3.getObject(params).createReadStream();
    // readStream.on('data', (chunk) => {
    //     data.Data = [...data.Data, chunk];
    //     socket.emit('MoreDownload',{ 'Name': '5g.mov', 'Place': data.Place + 1 , 'Size': 476, 'Data': Buffer.concat(data.Data).toString() });
    // });
    // readStream.on('end', () => {
    //     socket.emit('MoreDownload',{ 'Name': '5g.mov', 'Place': data.Place + 1 , 'Size': 476, 'Data': Buffer.concat(data.Data).toString() });
    // });
    // readStream.on('error', (err) => {
    //     console.error('error: ', err);
    // });
    s3.getObject(params,function (err,newData){
      console.log(newData);
      socket.emit('MoreDownload',{ 'Name': '5g.mov', 'Place': data.Place + 1 , 'Size': 476, 'Data': newData.Body });
    })
  });

});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
      ? 'Pipe ' + port
      : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
