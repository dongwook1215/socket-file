#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('socket-file:server');
var http = require('http');
var fs = require('fs');
var path = require('path');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io')(server);
const  S3FileConcat  =  require('s3-file-concat');
const  {  concatFiles  }  =  S3FileConcat({
  "accessKeyId":  "",
  "secretAccessKey":  "",
  "region":  "ap-northeast-2",
  "bucket":  "raccoon-bucket"
});
const AWS = require('aws-sdk');
const s3 = new AWS.S3({
  "accessKeyId":  "",
  "secretAccessKey":  "",
});

io.on('connection', function(socket){
  var Files = {};
  socket.on('Start', function(data){
    console.log('socket start!!');
    var Name = data.Name;
    Files[Name] = {
      FileSize : data.Size,
      Data : "",
      Downloaded : 0,
      ChunkBucket : []
    };
    var Place = 0;
    socket.emit('MoreData', { 'Place' : Place, Percent : 0 });
    // var Stat = fs.statSync(path.join(__dirname,'..','Temp',Name));
    // if(Stat.isFile()){
    //   Files[Name].Downloaded = Stat.size;
    //   Place = Stat.size / 524288;
    // }
    // fs.open(path.join(__dirname,'..','Temp',Name), "a+", function(err, fd){
    //   if(err) {
    //     console.log(err);
    //   }else {
    //     Files[Name].Handler = fd;
    //     socket.emit('MoreData', { 'Place' : Place, Percent : 0 });
    //   }
    // });
  })

  socket.on('Upload', function (data){
    const Name = data.Name;
    Files[Name].Downloaded += data.Data.length;
    Files[Name].Data += data.Data;
    if(Files[Name].Downloaded == Files[Name].FileSize){
      if(Files[Name].ChunkBucket.length > 0){
        const params = {
          Bucket: 'raccoon-bucket',
          Key: `${Files[Name].ChunkBucket.length}.txt`,
          Body: Files[Name].Data
        };
        s3.upload(params, function(s3Err, data) {
          if (s3Err) throw s3Err
          Files[Name].Data = ""; //Reset The Buffer
          Files[Name].ChunkBucket=[...Files[Name].ChunkBucket,`${Files[Name].ChunkBucket.length}.txt`]
          // concatFiles(Files[Name].ChunkBucket,  {
          //   targetFileKey: '3g.txt'
          // }).then(output => {
          //   console.log(Files[Name].ChunkBucket);
          //   console.log(Name + " : writing is completed.");
          // }).catch(error  =>  console.log('error occured oops ',  error));
        });
      }else{

      }
      // fs.write(Files[Name].Handler, Files[Name].Data, null, 'Binary', function(err, written) {
      //   if (err) console.error(err);
      //   //Generate movie thumbnail
      //   var readable = fs.createReadStream(path.join(__dirname,'..','Temp',Name));
      //   var writable = fs.createWriteStream(path.join(__dirname,'..','Video',Name));
      //   readable.pipe(writable);
      //   writable.on('finish', function (err) {
      //     if (err) console.error(err);
      //     console.log(Name + " : writing is completed.");
      //     fs.close(Files[Name].Handler, function (err) { //close fs module
      //       if (err) console.error(err);
      //       fs.unlink(path.join(__dirname,'..','Temp',Name), function (err) {
      //         //Moving File is Completed
      //         if (err) console.error(err);
      //         console.log(Name + " is deleted.");
      //       });
      //     });
      //   });
      // });
    }
    else if(Files[Name].Data.length > 10485760){
      const params = {
        Bucket: 'raccoon-bucket',
        Key: `${Files[Name].ChunkBucket.length}.txt`,
        Body: Files[Name].Data
      };
      s3.upload(params, function(s3Err, data) {
        if (s3Err) throw s3Err
        Files[Name].Data = ""; //Reset The Buffer
        Files[Name].ChunkBucket=[...Files[Name].ChunkBucket,`${Files[Name].ChunkBucket.length}.txt`]
        var Place = Files[Name].Downloaded / 524288;
        var Percent = (Files[Name].Downloaded / Files[Name].FileSize) * 100;
        socket.emit('MoreData', { 'Place' : Place, 'Percent' : Percent});
      });
      // fs.write(Files[Name].Handler, Files[Name].Data, null, 'Binary', function(err, written){
      //   Files[Name].Data = ""; //Reset The Buffer
      //   var Place = Files[Name].Downloaded / 524288;
      //   var Percent = (Files[Name].Downloaded / Files[Name].FileSize) * 100;
      //   socket.emit('MoreData', { 'Place' : Place, 'Percent' : Percent});
      // });
    } else {
      var Place = Files[Name].Downloaded / 524288;
      var Percent = (Files[Name].Downloaded / Files[Name].FileSize) * 100;
      socket.emit('MoreData', { 'Place' : Place, 'Percent' : Percent});
    }
  });

});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
      ? 'Pipe ' + port
      : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
